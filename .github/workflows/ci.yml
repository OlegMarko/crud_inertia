name: Build project

env:
  'DB_DATABASE': 'crud_inertia'
  'DB_USERNAME': 'root'
  'DB_PASSWORD': 'root'

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  continuous-integration:
    name: Laravel (PHP ${{ matrix.php-versions }})
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        php-versions: [ '8.3' ]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, dom, fileinfo, mysql, libxml, xml, xmlwriter, dom, tokenizer, filter, json, phar, pcre, openssl, pdo, intl, curl

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '21.6'

      - name: Setup MySQL
        uses: mirromutth/mysql-action@v1.1
        with:
          mysql database: ${{ env.DB_DATABASE }}
          mysql root password: ${{ env.DB_USERNAME }}

      - name: Get composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache composer dependencies
        uses: actions/cache@v1
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Prepare the application
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"

      - name: Install Composer dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

      - name: Generate key
        run: php artisan key:generate

      - name: Install npm dependencies
        run: npm install

      - name: Setup Permissions
        run: chmod -R 755 storage bootstrap/cache

      - name: Run artisan & npm
        run: |
          php artisan optimize:clear
          php artisan key:generate
          php artisan migrate:fresh --seed
          npm run build

      - name: Create Database
        run: |
          mkdir -p database
          touch database/database.sqlite

      - name: Execute tests (Unit and Feature tests) via PHPUnit
        env:
          DB_CONNECTION: sqlite
          DB_DATABASE: database/database.sqlite
        run: vendor/bin/phpunit
